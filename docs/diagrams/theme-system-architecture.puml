@startuml theme-system-architecture
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Arthur's Life App - Theme System Architecture (v1, 2025-07)

Container_Boundary(themes, "Theme Definitions") {
  Component(baseapptheme, "BaseAppTheme", "Interface", "Contract defining colorScheme, shapes, typography, backgroundImageRes, backgroundTint, semanticIcons, terminology, avatar, accessibility contrast")
  Component(materiallight, "MaterialLightTheme", "Implementation", "Material Design 3 light theme for caregivers")
  Component(materialdark, "MaterialDarkTheme", "Implementation", "Material Design 3 dark theme for low-light usage")
  Component(marioclassic, "MarioClassicTheme", "Implementation", "Retro gaming theme for children, Mario-inspired, COPPA-compliant")
}

Container_Boundary(management, "Theme Management") {
  Component(thememanager, "ThemeManager", "Singleton", "Central theme registry, metadata generation, fallback logic, accessibility checks")
  Component(themeviewmodel, "ThemeViewModel", "ViewModel", "Theme state management, role-based defaults, DataStore persistence, accessibility state")
  Component(themepreferences, "ThemePreferencesDataStore", "DataStore", "Per-role theme preference storage, migration, privacy compliance")
}

Container_Boundary(ui, "Theme-Aware UI Components") {
  Component(themeawareicon, "ThemeAwareIcon", "Compose", "Semantic icon mapping, theme-specific, accessibility content descriptions")
  Component(themeawareavatar, "ThemeAwareAvatar", "Compose", "Role-appropriate avatar display, theme-based")
  Component(themeawarebackground, "ThemeAwareBackground", "Compose", "Theme-specific background styling, images, tints, contrast")
  Component(themeselector, "ThemeSelector", "Compose", "Interactive theme selection UI, live preview, accessibility preview")
}

Container_Boundary(domain, "Domain Integration") {
  Component(user, "User Aggregate", "Domain", "User profile, role-based theme preferences, accessibility settings")
  Component(userrole, "UserRole", "Enum", "CHILD or CAREGIVER, determines theme defaults and accessibility")
}

Container_Boundary(terminology, "Theme Terminology") {
  Component(themeterminology, "ThemeTerminology", "Data Class", "Theme-specific language mapping, i18n/l10n support")
  Component(semanticicons, "SemanticIconType", "Enum", "Abstract icon concepts for theme-specific mapping")
}

' Theme inheritance relationships
baseapptheme <|-- materiallight : "implements"
baseapptheme <|-- materialdark : "implements"
baseapptheme <|-- marioclassic : "implements"

' Theme management relationships
thememanager --> baseapptheme : "manages instances"
themeviewmodel --> thememanager : "retrieves themes"
themeviewmodel --> themepreferences : "loads/saves preferences"
themeviewmodel --> user : "gets role-based defaults"
themeviewmodel --> userrole : "determines default theme"

' UI component relationships
themeawareicon --> thememanager : "gets current theme"
themeawareicon --> semanticicons : "uses semantic types"
themeawareavatar --> thememanager : "gets theme avatar"
themeawarebackground --> thememanager : "gets background styling"
themeselector --> themeviewmodel : "changes theme selection"

' Theme content relationships
baseapptheme --> themeterminology : "provides terminology"
baseapptheme --> semanticicons : "maps to specific icons"
marioclassic --> themeterminology : "gaming terms (Quests, Coins)"

@enduml
